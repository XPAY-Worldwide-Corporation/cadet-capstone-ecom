// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id  Int @id @default(autoincrement()) @unique
  email String  @db.VarChar(50) @unique
  username  String  @db.VarChar(15)
  password  String  @db.VarChar(250)
  customer Customer?
  seller Seller?
  @@map("user")
}

model Customer {
  id  Int @id @default(autoincrement()) @unique
  userId  Int @unique @map("user_id")
  firstName String  @db.VarChar(25) @map("first_name")
  lastName  String  @db.VarChar(25) @map("last_name")
  phoneNo String? @db.Char(11)  @map("phone_no")
  profileImgUrl String? @db.Text @map("profile_img_url")
  createdAt DateTime  @default(now()) @map("created_at")
  user User @relation(fields: [userId], references: [id])
  ratingsAndReviews RatingAndReview[]
  cart Cart?
  bookmark Bookmark?
  orders Order[]
  refunds Refund[]
  transactions Transaction[]
  customerAddresses CustomerAddress[]
  @@map("customer")
}

model CustomerAddress {
  id  Int @id @default(autoincrement()) @unique
  customerId  Int @map("customer_id")
  addressLineOne String @db.VarChar(255)  @map("address_line_one")
  postalCode  String @db.Char(4)  @map("postal_code")
  city  String @db.VarChar(50)
  isDefault Boolean @default(false) @map("is_dafault")
  customer Customer @relation(fields: [customerId], references: [id])
  orders Order[]
  @@map("customer_address")
}

model Seller {
  id  Int @id @default(autoincrement()) @unique     
  userId  Int @unique @map("user_id")
  firstName String  @db.VarChar(25) @map("first_name")
  lastName  String  @db.VarChar(25) @map("last_name")
  profileImgUrl String? @db.Text @map("profile_img_url")
  phoneNo   String?  @db.Char(11)  @map("phone_no")
  addressLineOne String @db.VarChar(255)  @map("address_line_one")
  postalCode  String @db.Char(4)  @map("postal_code")
  city  String @db.VarChar(50)
  createdAt DateTime  @default(now()) @map("created_at")
  user  User @relation(fields: [userId], references: [id])
  store Store?
  @@map("seller")
}

model Category {
  id  Int @id @default(autoincrement()) @unique
  name  String @db.VarChar()
  catTimgUrl String? @db.Text @map("cat_timg_url")
  products Product[]
  @@map("category")
}

model Store {
  id  Int @id @default(autoincrement()) @unique     
  sellerId  Int @unique @map("seller_id")
  storeName String  @db.VarChar(50) @map("store_name")
  storeDesc String  @db.Text  @map("store_desc")
  storeTimgUrl String?  @db.Text  @map("store_timg_url")
  pickupAddressLineOne String @db.VarChar(255)  @map("pickup_address_line_one")
  postalCode  String @db.Char(4)  @map("postal_code")
  city String @db.VarChar(50)
  isVerified  Boolean @default(false) @map("is_verified")
  seller  Seller? @relation(fields: [sellerId], references: [id]) 
  ratingsAndReviews RatingAndReview[]
  transactions Transaction[]
  storeCategories StoreCategory[]
  products Product[]
  orderItems OrderItem[]
  refunds Refund[] 
  @@map("store")
}

model StoreCategory {
  id  Int @id @default(autoincrement()) @unique     
  name  String @db.VarChar(50)
  displayName String @db.VarChar(50)  @map("display_name")
  storeId Int @map("store_id")
  store Store @relation(fields: [storeId], references: [id])
  products Product[]
  @@map("store_category")
}

model Product {
  id  Int @id @default(autoincrement()) @unique    
  storeId Int @map("store_id")  
  prodName String @db.VarChar(250) @map("prod_name")
  prodDesc  String  @db.Text  @map("prod_desc")
  prodTimgUrl  String?  @db.Text @map("prod_timg_Url")
  categoryId Int @map("cat_id") 
  storeCategoryId  Int? @map("store_category_id") 
  pricePerUnit  Decimal @db.Decimal(10, 2)  @map("price_per_unit")
  isActive Boolean @default(true) @map("is_active")
  store  Store @relation(fields: [storeId], references: [id])
  storeCategory  StoreCategory? @relation(fields: [storeCategoryId], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  ratingsAndReviews RatingAndReview[]
  prodVariations ProductVariation[]
  productImages ProductImage[]
  bookmarkItems BookmarkItem[]
  @@map("product")
}

model ProductVariation {
  id  Int @id @default(autoincrement()) @unique     
  productId Int  @map("product_id")
  color String  @db.VarChar(20)
  prodWidth Decimal @db.Decimal(10, 2)  @map("prod_width")
  prodHeight Decimal @db.Decimal(10, 2) @map("prod_height") 
  size  String  @db.VarChar(20)
  prodVarTimgUrl  String? @db.Text @map("prod_var_timg_url")
  prod  Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  prodInventory Inventory?
  cartItems CartItem[]
  @@map("product_variation")
}

model Inventory {
  id  Int @id @default(autoincrement()) @unique      
  productVarId Int @unique @map("product_var_id")
  stockNo  Int  @default(0) @map("stock_no")
  prodVariation ProductVariation @relation(fields: [productVarId], references: [id], onDelete: Cascade) 
  @@map("inventory")   
}

model RatingAndReview {
  id  Int @id @default(autoincrement()) @unique     
  productId  Int @map("product_id") 
  customerId  Int @map("customer_id")
  storeId Int @map("store_id")
  rate  Int 
  reviewDesc  String @db.Text @map("review_desc")
  createdAt DateTime  @default(now()) @map("created_at")
  store Store @relation(fields: [storeId], references: [id])
  customer  Customer  @relation(fields: [customerId], references: [id])    
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@map("rating_and_review")    
}

model Cart {
  id  Int @id @default(autoincrement()) @unique     
  customerId  Int @unique @map("customer_id")
  customer  Customer  @relation(fields: [customerId], references: [id])    
  cartItems CartItem[]
  @@map("cart")
}

model CartItem {
  id  Int @id @default(autoincrement()) @unique     
  cartId  Int @map("cart_id")
  productVarId Int @map("product_var_id")
  qty Int
  cart  Cart  @relation(fields: [cartId], references: [id])    
  prodVariation ProductVariation  @relation(fields: [productVarId], references: [id])
  @@map("cart_item")    
}

model Bookmark {
  id  Int @id @default(autoincrement()) @unique     
  customerId Int @unique  @map("customer_id")
  customer  Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookmarkItems BookmarkItem[]
  @@map("bookmark") 
}

model BookmarkItem {
  id  Int @id @default(autoincrement()) @unique     
  bookmarkId Int  @map("bookmark_id")
  productId  Int @map("product_id")
  bookmark Bookmark @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)    
  product Product @relation(fields: [productId], references: [id])
  @@map("bookmark_item")    
}

model Order {
  id  Int @id @default(autoincrement()) @unique     
  customerId  Int @map("customer_id")
  customerAddressId Int @map("customer_address_id")
  paymentMethodId Int @map("payment_method_id") 
  paymentStatusId Int @map("payment_status_id")
  subtotal  Decimal @db.Decimal(10, 2)
  discount  Decimal? @db.Decimal(10, 2) @default(0.00)
  totalShippingFee Decimal @db.Decimal(10, 2)  @map("shipping_fee")
  customer  Customer  @relation(fields: [customerId], references: [id])
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentStatus PaymentStatus @relation(fields: [paymentStatusId], references: [id])
  customerAddress CustomerAddress @relation(fields: [customerAddressId], references: [id])
  orderItems OrderItem[]
  transaction Transaction?
  @@map("order")
}

model OrderItem {
  id  Int @id @default(autoincrement()) @unique     
  orderId Int @map("order_id")
  storeId Int @map("store_id")
  productVarId Int @map("product_id")
  shippingMethodId  Int @map("shipping_method_id")
  orderItemStatusId Int @map("order_item_status_id") @default(1)
  qty Int
  pricePerUnit  Decimal @db.Decimal(10, 2)  @map("price_per_unit")
  prodVar ProductVariation  @relation(fields: [productVarId], references: [id])    
  store Store @relation(fields: [storeId], references: [id])
  order Order @relation(fields: [orderId], references: [id]) 
  orderItemStatus OrderItemStatus @relation(fields: [orderItemStatusId], references: [id])
  shippingMethod  ShippingMethod  @relation(fields: [shippingMethodId], references: [id])
  refunds Refund?
  @@map("order_item")
}

model Refund {
  id  Int @id @default(autoincrement()) @unique     
  customerId  Int @map("customer_id")
  storeId Int @map("store_id")
  orderItemId Int @unique @map("order_item_id")
  refundTypeId Int  @map("refund_type_id")
  refundReasonId  Int @map("refund_reason_id")
  refundDesc  String @db.Text @map("refund_desc")
  refundStatusId Int @default(1)  @map("refund_status_id")
  refundRef String @db.Text @map("refund_ref")
  refundAmt Decimal @db.Decimal(10, 2)  @map("refund_amt")
  createdAt DateTime @default(now())  @map("created_at")
  fulfilledAt DateTime  @map("fulfilled_at")
  customer  Customer  @relation(fields: [customerId], references: [id])
  store Store @relation(fields: [storeId], references: [id])
  orderItem OrderItem @relation(fields: [orderItemId], references: [id])  
  refundType RefundType @relation(fields: [refundTypeId], references: [id])
  refundReason RefundReason @relation(fields: [refundReasonId], references: [id])
  refundStatus RefundStatus @relation(fields: [refundStatusId], references: [id])
  @@map("refund")
}

model Transaction {
  id  Int @id @default(autoincrement()) @unique     
  customerId  Int @map("customer_id")
  storeId Int @map("store_id")
  orderId  Int @unique  @map("order_id")
  totalPaid Decimal @db.Decimal(10, 2)  @map("total_paid")
  refId String? @db.VarChar(250)  @map("ref_id")
  createdAt DateTime  @map("created_at")
  order Order @relation(fields: [orderId], references: [id])  
  customer  Customer  @relation(fields: [customerId], references: [id])
  store   Store  @relation(fields: [storeId], references: [id])
  @@map("transaction")
}

model ProductImage {
  id  Int @id @default(autoincrement()) @unique     
  productId Int @map("product_id")
  url String @db.Text
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  @@map("product_image")
} 

model RefundType {
  id Int @id @default(autoincrement())  @unique     
  name String @db.Char(10)
  displayName String @db.VarChar(10)  @map("display_name")
  refunds Refund[]
  @@map("refund_type")
}

model RefundReason {
  id Int @id @default(autoincrement())  @unique     
  name String @db.VarChar(25)
  displayName String @db.VarChar(50)  @map("display_name")
  refunds Refund[]
  @@map("refund_reason")
}

model RefundStatus {
  id Int @id @default(autoincrement())  @unique     
  name String @db.VarChar(10)
  displayName String @db.VarChar(10)  @map("display_name")
  refunds Refund[]
  @@map("refund_status")
}

model OrderItemStatus {
  id Int @id @default(autoincrement())  @unique     
  name String @db.Char(15)
  displayName String @db.Char(15) @map("display_name")
  orderItems OrderItem[]
  @@map("order_item_status")
}

model PaymentStatus {
  id Int @id @default(autoincrement())  @unique     
  name String @db.Char(10)
  displayName String @db.Char(10) @map("display_name")
  orders Order[]
  @@map("payment_status") 
}

model PaymentMethod {
  id  Int @id @default(autoincrement()) @unique   
  name String @db.Char(25)
  displayName String @db.Char(25) @map("display_name")
  orders Order[]
  @@map("payment_method")
}

model ShippingMethod {
  id Int @id @default(autoincrement())  @unique   
  name String @db.Char(25)
  displayName String @db.Char(25) @map("display_name")
  deliveryFee Decimal @db.Decimal(10, 2)  @map("delivery_fee")
  desc String @db.VarChar(100)
  orderItems OrderItem[]
  @@map("shipping_method")
}


